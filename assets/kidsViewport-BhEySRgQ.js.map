{"version":3,"file":"kidsViewport-BhEySRgQ.js","sources":["../../src/landing/ui/kidsViewport.js"],"sourcesContent":["/**\n * Kids Viewport Module\n * \n * This module handles loading the public/PsycheJR/kids.html content in an iframe\n * that appears on top of the Three.js scene.\n * \n * Optimized for responsive design across various screen sizes including:\n * - iPad Pro 11\" (2388 x 1668 pixels at 264 ppi)\n * - Other common device sizes\n * - Custom sizes set via developer tools\n */\n\nimport * as ViewportStyling from '../ui/viewportStyling.js';\nimport { resolvePath } from '../utils/utils.js';\n\n// Keep track of the viewport DOM elements\nlet viewportContainer = null;\nlet iframe = null;\nlet closeButton = null;\nlet resizeObserver = null;\n\n/**\n * Calculates the optimal viewport size based on screen dimensions\n * @returns {Object} The calculated width and height\n */\nfunction calculateViewportSize() {\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    \n    console.log(`Screen size: ${screenWidth}x${screenHeight}, Pixel ratio: ${devicePixelRatio}`);\n    \n    // Calculate responsive dimensions\n    let width, height, maxWidth;\n    \n    // Special handling for iPad Pro 11\" (2388x1668) and similar devices\n    const isIpadPro = (screenWidth === 2388 && screenHeight === 1668) || \n                      (screenHeight === 2388 && screenWidth === 1668);\n    \n    if (isIpadPro) {\n        console.log(\"iPad Pro 11\\\" detected\");\n        // Optimized for iPad Pro 11\"\n        width = '90%';\n        maxWidth = '2000px';\n        height = '90vh';\n    } else if (screenWidth >= 2000) {\n        // Extra large screens (2000px-2560px)\n        width = '85%';\n        maxWidth = '2400px';\n        height = '85vh';\n    } else if (screenWidth >= 1600) {\n        // Very large screens (1600px-2000px)\n        width = '88%';\n        maxWidth = '1900px';\n        height = '88vh';\n    } else if (screenWidth >= 1200) {\n        // Large screens (1200px-1600px)\n        width = '90%';\n        maxWidth = '1500px';\n        height = '90vh';\n    } else if (screenWidth >= 992) {\n        // Medium-large screens (992px-1200px)\n        width = '92%';\n        maxWidth = '1150px';\n        height = '92vh';\n    } else if (screenWidth >= 768) {\n        // Medium screens (tablets) (768px-992px)\n        width = '95%';\n        maxWidth = '950px';\n        height = '95vh';\n    } else {\n        // Small screens (phones) (<768px)\n        width = '98%';\n        maxWidth = '100%';\n        height = '98vh';\n    }\n    \n    return { width, maxWidth, height };\n}\n\n/**\n * Updates the viewport container size based on current screen dimensions\n */\nfunction updateViewportSize() {\n    if (!viewportContainer) return;\n    \n    const { width, maxWidth, height } = calculateViewportSize();\n    \n    viewportContainer.style.width = width;\n    viewportContainer.style.maxWidth = maxWidth;\n    viewportContainer.style.height = height;\n    \n    console.log(`Viewport resized to: width=${width}, maxWidth=${maxWidth}, height=${height}`);\n    \n    // Inject CSS to ensure container1 with astronautcar scales properly\n    if (iframe && iframe.contentDocument) {\n        try {\n            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n            const container1 = iframeDoc.getElementById('container1');\n            \n            if (container1) {\n                // Apply scaling based on viewport width\n                const scale = Math.min(1, window.innerWidth / 1920); // Base scale on a 1920px reference\n                \n                // Create or update the style element for responsive adjustments\n                let styleEl = iframeDoc.getElementById('responsive-scaling');\n                if (!styleEl) {\n                    styleEl = iframeDoc.createElement('style');\n                    styleEl.id = 'responsive-scaling';\n                    iframeDoc.head.appendChild(styleEl);\n                }\n                \n                // Update the scaling styles\n                styleEl.textContent = `\n                    #container1 {\n                        transform: scale(${scale});\n                        transform-origin: center top;\n                        width: calc(100% / ${scale});\n                        margin-left: auto;\n                        margin-right: auto;\n                    }\n                    \n                    #astronautCar {\n                        max-width: 100%;\n                        height: auto;\n                    }\n                `;\n                \n                console.log(`Applied responsive scaling: ${scale}`);\n            }\n        } catch (e) {\n            console.error(\"Could not modify iframe content:\", e);\n        }\n    }\n}\n\n\n/**\n * Creates and shows the kids viewport with animations.\n */\nexport function showKidsViewport() {\n    // If viewport already exists, just show it\n    if (viewportContainer) {\n        viewportContainer.style.display = 'flex';\n        updateViewportSize();\n        return;\n    }\n\n    console.log(\"Creating kids viewport\");\n\n    // Create container for the viewport\n    viewportContainer = document.createElement('div');\n    viewportContainer.id = 'kids-viewport-container';\n    ViewportStyling.applyViewportContainerStyles(viewportContainer);\n    \n    // Set responsive dimensions\n    const { width, maxWidth, height } = calculateViewportSize();\n    viewportContainer.style.width = width;\n    viewportContainer.style.maxWidth = maxWidth;\n    viewportContainer.style.height = height;\n    \n    // Create header with title and close button\n    const header = document.createElement('div');\n    ViewportStyling.applyHeaderStyles(header);\n    \n    const title = document.createElement('h2');\n    title.textContent = 'Psyche Jr - Kids Space Explorer';\n    ViewportStyling.applyTitleStyles(title);\n    \n    closeButton = document.createElement('button');\n    closeButton.textContent = 'âœ•';\n    ViewportStyling.applyCloseButtonStyles(closeButton);\n    \n    header.appendChild(title);\n    header.appendChild(closeButton);\n    viewportContainer.appendChild(header);\n    \n    // Create iframe to load the kids content\n    iframe = document.createElement('iframe');\n    iframe.src = resolvePath(\"/PsycheJR/kids.html\");  // Use absolute path from project root\n    ViewportStyling.applyIframeStyles(iframe);\n    \n    // Add scrollbar hiding styles\n    ViewportStyling.addScrollbarHidingStyles(document);\n    \n    // Add event listener for iframe load errors\n    iframe.onerror = () => {\n        console.error(\"Failed to load kids iframe content\");\n    };\n    \n    // Add event listener for iframe load success\n    iframe.onload = () => {\n        console.log(\"Kids iframe loaded successfully\");\n        ViewportStyling.injectScrollbarHidingStyles(iframe);\n        \n        // Apply responsive scaling to container1 after iframe loads\n        updateViewportSize();\n        \n        // Add a MutationObserver to detect changes in the iframe content\n        try {\n            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n            const observer = new MutationObserver(() => {\n                // Re-apply responsive scaling when DOM changes\n                updateViewportSize();\n            });\n            \n            // Start observing the iframe document\n            observer.observe(iframeDoc.body, { \n                childList: true, \n                subtree: true \n            });\n        } catch (e) {\n            console.error(\"Could not set up MutationObserver:\", e);\n        }\n    };\n    \n    viewportContainer.appendChild(iframe);\n    document.body.appendChild(viewportContainer);\n    \n    // Add visual effects\n    ViewportStyling.addShimmerEffect(viewportContainer);\n    ViewportStyling.addStarParticles(viewportContainer);\n    \n    // Create animations\n    ViewportStyling.addOpeningAnimations(viewportContainer, header, iframe);\n    ViewportStyling.addPulsingGlowEffect(viewportContainer);\n    \n    // Add event listener for close button\n    closeButton.addEventListener('click', () => {\n        ViewportStyling.createClosingAnimation(viewportContainer, destroyKidsViewport);\n    });\n        \n    // Add event listener for Escape key\n    document.addEventListener('keydown', handleKeyDown);\n    \n    // Add window resize listener\n    window.addEventListener('resize', updateViewportSize);\n    \n    // Set up ResizeObserver for more accurate size monitoring\n    // This is especially useful for detecting size changes in developer tools\n    resizeObserver = new ResizeObserver(entries => {\n        console.log(\"ResizeObserver detected size change\");\n        updateViewportSize();\n    });\n    \n    resizeObserver.observe(document.body);\n}\n\n/**\n * Hides the kids viewport with closing animation.\n */\nexport function hideKidsViewport() {\n    if (!viewportContainer) return;\n    \n    // Animate closing effect\n    ViewportStyling.createClosingAnimation(viewportContainer, () => {\n        viewportContainer.style.display = 'none';\n        // Reset opacity and scale for next time\n        viewportContainer.style.opacity = 1;\n        viewportContainer.style.transform = 'translate(-50%, -50%) scale(1)';\n    });\n}\n\n/**\n * Handles keydown events for the viewport.\n */\nfunction handleKeyDown(e) {\n    if (e.key === 'Escape') {\n        ViewportStyling.createClosingAnimation(viewportContainer, destroyKidsViewport);\n    }\n}\n\n/**\n * Removes the viewport completely.\n */\nexport function destroyKidsViewport() {\n    if (viewportContainer) {\n        closeButton.removeEventListener('click', hideKidsViewport);\n        document.removeEventListener('keydown', handleKeyDown);\n        window.removeEventListener('resize', updateViewportSize);\n        \n        if (resizeObserver) {\n            resizeObserver.disconnect();\n            resizeObserver = null;\n        }\n        \n        document.body.removeChild(viewportContainer);\n        viewportContainer = null;\n        iframe = null;\n        closeButton = null;\n    }\n}\n\n/**\n * Manually set a specific viewport size for testing\n * This can be called from the console in developer tools (F12)\n * @param {number} width - Width in pixels\n * @param {number} height - Height in pixels\n */\nwindow.setKidsViewportSize = function(width, height) {\n    if (!viewportContainer) {\n        console.warn(\"Kids viewport is not currently active\");\n        return;\n    }\n    \n    console.log(`Manually setting viewport size to ${width}x${height}`);\n    \n    viewportContainer.style.width = `${width}px`;\n    viewportContainer.style.maxWidth = `${width}px`;\n    viewportContainer.style.height = `${height}px`;\n    \n    // Center the viewport\n    viewportContainer.style.transform = 'translate(-50%, -50%)';\n    \n    // Apply responsive scaling to container1\n    if (iframe && iframe.contentDocument) {\n        try {\n            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n            const container1 = iframeDoc.getElementById('container1');\n            \n            if (container1) {\n                // Apply scaling based on viewport width\n                const scale = Math.min(1, width / 1920); // Base scale on a 1920px reference\n                container1.style.transform = `scale(${scale})`;\n                container1.style.transformOrigin = 'center top';\n                container1.style.width = `calc(100% / ${scale})`;\n                console.log(`Applied manual scaling: ${scale}`);\n            }\n        } catch (e) {\n            console.error(\"Could not modify iframe content:\", e);\n        }\n    }\n    \n    return `Viewport size set to ${width}x${height}`;\n};\n\n/**\n * Reset the viewport to responsive sizing\n * This can be called from the console in developer tools (F12)\n */\nwindow.resetKidsViewportSize = function() {\n    if (!viewportContainer) {\n        console.warn(\"Kids viewport is not currently active\");\n        return;\n    }\n    \n    updateViewportSize();\n    return \"Viewport size reset to responsive mode\";\n};\n"],"names":["hideKidsViewport","width","height"],"mappings":"4BA2PO,SAASA,GAAmB,CAUnC,CAsCA,OAAO,oBAAsB,SAASC,EAAOC,EAAQ,CACzB,CACpB,QAAQ,KAAK,uCAAuC,EACpD,MACR,CA+BA,EAMA,OAAO,sBAAwB,UAAW,CACd,CACpB,QAAQ,KAAK,uCAAuC,EACpD,MACR,CAIA"}